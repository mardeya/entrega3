---
title: "Relación entre los indicadores sociales, económicos y ambientales alrededor del mundo"
title-slide-attributes:
  data-background-image: imagentitulo.jpg
  data-background-size: contain
  data-background-opacity: "0.7"
author:
  - Frank William Hammond Espinosa
  - Maria del Mar Deyà Torrens
  - Toni Fuentes Bauzà
format: 
  revealjs:
    transition: convex
    background-transition: fade
editor: source
---

## Índice

-   Fuente de datos
-   Resumen del problema
-   Proceso de limpieza de los datos
-   Variables de nuestra base de datos
-   Estimación del vector de medias
-   Matriz de correlaciones
-   Contrastes de correlación
-   Análisis multivariante
-   Conclusiones

## Fuente de datos

Hemos encontrado nuestra fuente de datos en este [enlace](https://www.kaggle.com/datasets/toriqulstu/global-socio-economic-and-environmental-indicators) de la página web de *kaggle*.

::: {style="text-align:center;"}
![](imagen1.png){width="50%"}
:::

Además, hemos complementado nuestra base con otros datos que nos ofrecían información del país sobre el [continente](https://www.kaggle.com/datasets/statchaitya/country-to-continent) y la [poblacion](https://ourworldindata.org/explorers/population-and-demography).

## Resumen del problema

El objetivo de nuestro estudio es encontrar relaciones entre los indicadores sociales, econónimos y ambientales de los diferentes países de nuestro planeta.

-   Relación entre HDI y producción de $CO_2$.

-   Relación entre GNIPC y esperanza de vida.

-   Relación entre $CO_2$ y esperanza de vida.

::: {style="text-align:center;"}
![](imagen2.jpg){width="30%"}
:::


## Proceso de limpieza de los datos


```{r, echo = TRUE}
# Leer los diferentes tablas
db1 = read.csv("co2_production.csv")
db2 = read.csv("gross_national_income_per_capital.csv")
db3 = read.csv("human_development_index.csv")
db4 = read.csv("life_expectancy_by_birth.csv")
db5 = read.csv("population.csv")
db6 = read.csv("country_continent.csv")

library(tidyverse)

db1 <- db1 %>% 
  select(1:3, 5, co2_prod_2021) %>% 
  dplyr::filter(ISO3 != "")

db2 <- db2 %>% 
  select(ISO3, gnipc_2021) %>% 
  dplyr::filter(ISO3 != "")

db3 <- db3 %>% 
  select(ISO3, hdi_2021) %>% 
  dplyr::filter(ISO3 != "")

db4 <- db4 %>% 
  select(ISO3, le_2021) %>% 
  dplyr::filter(ISO3 != "")

db5 <- db5 %>% 
  dplyr::filter(Year == 2021) %>% 
  rename(Country = Country.name) %>% 
  select(Country, Population)

db6 <- db6 %>% 
  select(code_3, continent) %>% 
  rename(ISO3 = code_3, Continent = continent)


# Junto las primeras tablas
db <- db1 %>% 
  left_join(db2, by = "ISO3") %>% 
  left_join(db3, by = "ISO3") %>% 
  left_join(db4, by= "ISO3")
  

# Arreglar los datos para hacer el join

db5[27, "Country"] <- db[23, "Country"]   # Bolivia
db5[33, "Country"] <- db[26, "Country"]   # Brunei
db[34, "Country"] <- db5[51, "Country"]   # Costa de marfil
db5[57, "Country"] <- db[36, "Country"]   # Rep. Congo
db5[40, "Country"] <- db[40, "Country"]   # Cabo Verde
db5[149, "Country"] <- db[60, "Country"]  # Micronesia
db5[98, "Country"] <- db[73, "Country"]   # Hong Kong
db5[103, "Country"] <- db[81, "Country"]  # Iran
db[95, "Country"] <- db5[215, "Country"]  # Corea del Sur
db5[120, "Country"] <- db[97, "Country"]  # Laos
db5[150, "Country"] <- db[110, "Country"] # Moldova
db[143, "Country"] <- db5[169, "Country"] # Corea del Norte
db5[178, "Country"] <- db[146, "Country"] # Palestina
db5[190, "Country"] <- db[149, "Country"] # Russia
db5[69, "Country"] <- db[167, "Country"]  # Eswatini
db5[223, "Country"] <- db[169, "Country"] # Syria
db5[62, "Country"] <- db[175, "Country"]  # Timor-Leste
db[179, "Country"] <- db5[233, "Country"] # Turquia
db5[226, "Country"] <- db[181, "Country"] # Tanzania
db5[247, "Country"] <- db[188, "Country"] # Venezuela
db5[248, "Country"] <- db[189, "Country"] # Vietnam

# data final

db <- db %>% 
  left_join(db5, by= "Country") %>% 
  left_join(db6, by="ISO3")

db <- db %>%
  mutate(hdicode = if_else(
    hdicode == "",
    NA, 
    hdicode
  ))

db <- db %>%
  mutate(Continent = if_else(
    Continent == "",
    NA, 
    Continent
  ))

db <- db %>% 
  rename("HDI_level" = "hdicode", "HDI_rank" = "hdi_rank_2021", 
         "CO2_prod" = "co2_prod_2021", "GNIPC" = "gnipc_2021", "HDI" = "hdi_2021", "Life_expect" 
         = "le_2021")

db <- db %>% 
  select(1,2,10,4,3,7,5,6,8,9)

db <- db %>% 
  mutate(HDI_level = factor(HDI_level, ordered = T, 
                            levels = c("Low", "Medium", "High", "Very High")), 
         Continent = factor(Continent))

write.csv(db, "dataset_tidy.csv", row.names = FALSE)
```


## Proceso de limpieza de los datos

::: {style="text-align:center;"}
![](imagen3.jpg){width="40%"}
:::

-   Hemos juntado las 6 tablas usando la función *left_join* gracias a la clave primaria *ISO3*.
-   Hemos convertido las variables *Continente* y *HDI_level* en factores. La segunda de ellas en un factor ordenado.
-   Además hemos cambiado el nombre de algunas variables para mejorar su comprensión.

## Variables de nuestra base de datos

```{r, echo = FALSE}
library(tidyverse)
db = read.csv("dataset_tidy.csv") 
db <- db %>% 
  mutate(HDI_level = factor(HDI_level, ordered = T, 
                            levels = c("Low", "Medium", "High", "Very High")), 
         Continent = factor(Continent))

str(db)
```

-   2 variables ordinales: *HDI_rank*, *HDI_level*.
-   2 variables nominales: *Country*, *Continent*.
-   5 variables cuantitativas: *HDI*, *CO2_prod*, *GNIPC*, *Life_expect*, *Population*.

## Vectores de medias

Media y vector de medias del HDI por continente:

```{r}
mean(db$HDI %>% na.omit)
tapply(db$HDI, db$Continent, mean, na.rm = TRUE)
```

Media y vector de medias de la producción de $CO_2$ por continente:

```{r}
mean(db$CO2_prod %>% na.omit)
tapply(db$CO2_prod, db$Continent, mean, na.rm = TRUE)
```

Media y vector de medias de la producción del PIB por continente:

```{r}
mean(db$GNIPC %>% na.omit)
tapply(db$GNIPC, db$Continent, mean, na.rm = TRUE)
```

## Vectores de medias

Media y vector de medias de la producción de la esperanza de vida por continente:

```{r}
mean(db$Life_expect %>% na.omit)
tapply(db$Life_expect, db$Continent, mean, na.rm = TRUE)
```

Media y vector de medias de la producción de la población por continente:

```{r}
mean(db$Population %>% na.omit)
tapply(db$Population, db$Continent, mean, na.rm = TRUE)
```

## Comparación de las variables respecto a los continentes

```{r, echo = FALSE}
library(fmsb)

layout(matrix(c(1,1,2, 2,3, 3, 4,4,4, 5,5,5), nrow = 2, byrow = TRUE))

db %>% 
  select(Continent,HDI) %>% 
  group_by(Continent) %>% 
  summarise(mean_HDI=mean(HDI, na.rm = TRUE)) %>% 
  pivot_wider(names_from = Continent, values_from = mean_HDI) %>% 
  rbind(rep(1,5), rep(0.3,5),.) %>% 
  radarchart(title = "Media del HDI", cglty = 1, cglcol = "gray",
           pcol = 4, plwd = 2,
           pfcol = rgb(0, 0.4, 1, 0.25), vlcex = 0.8)

db %>% 
  select(Continent,CO2_prod) %>% 
  group_by(Continent) %>% 
  summarise(mean_CO2=mean(CO2_prod, na.rm = TRUE)) %>% 
  pivot_wider(names_from = Continent, values_from = mean_CO2) %>% 
  rbind(rep(10,5), rep(0,5),.) %>% 
  radarchart(title = "Media de la producción de CO2", cglty = 1, cglcol = "grey",
           pcol = 2, plwd = 2,
           pfcol = rgb(1, 0, 0, 0.25), vlcex = 0.8)

db %>% 
  select(Continent,GNIPC) %>% 
  group_by(Continent) %>% 
  summarise(mean_GNIPC=mean(GNIPC, na.rm = TRUE)) %>% 
  pivot_wider(names_from = Continent, values_from = mean_GNIPC) %>% 
  rbind(rep(50000,5), rep(0,5),.) %>% 
  radarchart(title = "Media del PIB", cglty = 1, cglcol = "grey",
           pcol = 3, plwd = 2,
           pfcol = rgb(0.4, 1, 0, 0.25), vlcex = 0.8)

db %>% 
  select(Continent,Life_expect) %>% 
  group_by(Continent) %>% 
  summarise(mean_Life=mean(Life_expect, na.rm = TRUE)) %>% 
  pivot_wider(names_from = Continent, values_from = mean_Life) %>% 
  rbind(rep(90,5), rep(60,5),.) %>% 
  radarchart(title = "Media de la esperanza de vida", cglty = 1, cglcol = "grey",
           pcol = 7, plwd = 2,
           pfcol = rgb(1, 1, 0, 0.25), vlcex = 0.8)


db %>% 
  select(Continent,Population) %>% 
  group_by(Continent) %>% 
  summarise(mean_Population=mean(Population, na.rm = TRUE)) %>% 
  pivot_wider(names_from = Continent, values_from = mean_Population) %>% 
  rbind(rep(150000000,5), rep(1000,5),.) %>% 
  radarchart(title = "Media de la Población", cglty = 1, cglcol = "grey",
           pcol = 14, plwd = 2,
           pfcol = rgb(1, 0, 1, 0.25), vlcex = 0.8)


```
## Correlación

```{r}
library("ggcorrplot")

db %>% 
  select(HDI, CO2_prod, GNIPC, Life_expect, Population) %>% 
  na.omit %>%
  cor %>% 
  ggcorrplot(hc.order=TRUE,type="lower")
```

## Matriz de correlaciones

```{r}
db %>% 
  select(HDI, CO2_prod, GNIPC, Life_expect, Population) %>% 
  na.omit %>%
  cor
```

## Contrastes de correlación

```{r, echo = TRUE}
source("data_tidy.R")

contraste_correlacion<- function(df, continente,var1,k){  
  # Contrastes a realizar, para var1 y var2:
  # H0: corr_continente=corr_global
  # H1: corr_continente!=corr_global
  
  df<-df %>% select(c("Continent",var1))
  filter(df,Continent==continente)[,var1] -> continente_df_var1
  num_paises_cont=table(df$Continent)[continente]
  n=nrow(df)
  
  sample_df=sample_n(df,num_paises_cont,replace=FALSE)
  
  nH1_var1=0
  
  for (x in 1:k){
    set.seed(x)
    
    sample_df=sample_n(df,num_paises_cont,replace=FALSE)
    
    # Test de correlacion
    # var1
    pval_var1=cor.test(sample_df[,var1],continente_df_var1)$p.value
    if (pval_var1<0.05){nH1_var1=nH1_var1+1}
  }
  res_test_var1=(nH1_var1<(3/4)*k) # TRUE ~ H0, FALSE ~ H1
  
  print(nH1_var1)
  return (res_test_var1)
}
```

## Análisis multivariante

```{r, echo=FALSE}
library("GGally")

log10_vars <- vars(ends_with("Population"))

a <- db %>% select(c(3, 6, 7, 8, 9, 10)) %>% na.omit

a$Population <- log10(a$Population)
a <- a %>% rename_at(log10_vars, sprintf, fmt="log10(%s)")

continent_colors <- c("black", "red", "yellow", "green", "blue")

a %>% ggpairs(aes(color=a$Continent, alpha=0.4)) +
  scale_fill_manual(values = continent_colors) +
  scale_color_manual(values = continent_colors)

# subplot <- getPlot(p, 1, 6)
# subplotNew <- subplot + scale_y_log10()
# subplotNew$type <- "logcontinuous"
# subplotNew$subType <- "logpoints"
# p <- putPlot(p, subplotNew, 1, 6)
```


## Conclusiones


